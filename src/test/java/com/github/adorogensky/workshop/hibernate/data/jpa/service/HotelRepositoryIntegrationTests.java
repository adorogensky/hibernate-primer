/*
 * Copyright 2012-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.adorogensky.workshop.hibernate.data.jpa.service;

import java.util.Date;
import java.util.List;

import com.github.adorogensky.workshop.hibernate.data.jpa.domain.*;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.github.adorogensky.workshop.hibernate.data.jpa.SampleDataJpaApplication;

import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

/**
 * Integration tests for {@link HotelRepository}.
 * 
 * @author Oliver Gierke
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = SampleDataJpaApplication.class)
public class HotelRepositoryIntegrationTests {

	@Autowired
	CityRepository cityRepository;
	@Autowired
	HotelRepository repository;

	@Autowired
	HotelService hotelService;

	@Test
	public void executesQueryMethodsCorrectly() {
		City city = this.cityRepository
				.findAll(new PageRequest(0, 1, Direction.ASC, "name")).getContent()
				.get(0);
		assertThat(city.getName(), is("Atlanta"));

		Page<HotelSummary> hotels = this.repository.findByCity(city, new PageRequest(0,
				10, Direction.ASC, "name"));
		Hotel hotel = this.repository.findByCityAndName(city, hotels.getContent().get(0)
				.getName());
		assertThat(hotel.getName(), is("Doubletree"));

		List<RatingCount> counts = this.repository.findRatingCounts(hotel);
		assertThat(counts, hasSize(1));
		assertThat(counts.get(0).getRating(), is(Rating.AVERAGE));
		assertThat(counts.get(0).getCount(), is(greaterThan(1L)));
	}

	/**
	 * A new transient Review object added to the collection of Review objects on a persistent Hotel object becomes persistent (and autogenerated id gets populated)
	 * when the Hotel object is saved and save operation on a Hotel object gets cascaded down the Review objects collection.
	 * */
	@Test
	public void addReviewCascadeSave() {
		Review newReview = new Review();
		newReview.setTitle("New Review");
		newReview.setTripType(TripType.FAMILY);
		newReview.setDetails("New Review Details");
		newReview.setCheckInDate(new Date());
		newReview.setRating(Rating.AVERAGE);

		Long chicagoAlegroHotelId = repository.findByName("Hotel Allegro").getId();

		Review returnNewReview = hotelService.addReview(chicagoAlegroHotelId, newReview);

		assertNotNull(returnNewReview);
		assertNotNull(returnNewReview.getId());
	}
}
